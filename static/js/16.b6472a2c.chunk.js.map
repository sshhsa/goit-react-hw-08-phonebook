{"version":3,"file":"static/js/16.b6472a2c.chunk.js","mappings":"yPACA,EAA4B,6BAA5B,EAAsE,8BAAtE,EAAkH,+BAAlH,EAAgK,gC,SCQ1JA,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,WAC3CC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,sBACPC,IAAI,GAAI,qBACRH,aAGE,SAASI,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAER,MAAO,GAAIE,SAAU,IACtCO,iBAAkBZ,EAClBa,SAZiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GAASO,EAAAA,EAAAA,IAAMF,IACZG,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAc,4BAApB,IACLC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,oCAAlB,IACTJ,GACD,EAGC,UAKE,UAAC,KAAD,CAAMM,aAAa,MAAMC,UAAWC,EAApC,WACE,mBAAOD,UAAWC,EAAlB,mBAEE,SAAC,KAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQH,UAAWC,KAC5C,SAAC,KAAD,CACEG,UAAU,OACVD,KAAK,QACLH,UAAWC,QAGf,mBAAOD,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWH,UAAWC,KAClD,SAAC,KAAD,CACEG,UAAU,OACVD,KAAK,WACLH,UAAWC,QAGf,SAACI,EAAA,EAAD,CAAQH,KAAK,SAAb,wBAIP,CCxDc,SAASI,IACtB,OACE,4BACE,sCACA,SAACpB,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/authComponent/LoginForm/LoginForm.module.css?f80d","components/authComponent/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formLogIn\":\"LoginForm_formLogIn__QY6iG\",\"labelLogIn\":\"LoginForm_labelLogIn__TO194\",\"fieldFormik\":\"LoginForm_fieldFormik__ti3hd\",\"errorMessage\":\"LoginForm_errorMessage__GvmKL\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operations';\nimport { Button } from 'components/contactsComponent/Button/Button';\nimport css from './LoginForm.module.css';\n\nconst schemaLogIn = yup.object().shape({\n  email: yup.string().email('Invalid email').required(),\n  password: yup\n    .string()\n    .min(6, 'Not enough symbols')\n    .max(20, 'Too long password')\n    .required(),\n});\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values))\n      .unwrap()\n      .then(() => toast.success('Registration successfully'))\n      .catch(() => toast.error('Something went wrong...Try again.'));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={schemaLogIn}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\" className={css.formLogIn}>\n        <label className={css.labelLogIn}>\n          Email\n          <Field type=\"email\" name=\"email\" className={css.fieldFormik} />\n          <ErrorMessage\n            component=\"span\"\n            name=\"email\"\n            className={css.errorMessage}\n          />\n        </label>\n        <label className={css.labelLogIn}>\n          Password\n          <Field type=\"password\" name=\"password\" className={css.fieldFormik} />\n          <ErrorMessage\n            component=\"span\"\n            name=\"password\"\n            className={css.errorMessage}\n          />\n        </label>\n        <Button type=\"submit\">Log In</Button>\n      </Form>\n    </Formik>\n  );\n}\n","import { LoginForm } from 'components/authComponent/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <title>Login</title>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["schemaLogIn","yup","shape","email","required","password","min","max","LoginForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","logIn","unwrap","then","toast","catch","autoComplete","className","css","type","name","component","Button","Login"],"sourceRoot":""}