{"version":3,"file":"static/js/330.dd507e49.chunk.js","mappings":"0PACA,EAA+B,mCAA/B,EAAkF,oCAAlF,EAAoI,kCAApI,EAAqL,mC,SCQ/KA,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,sBACPC,IAAI,GAAI,iBACRC,WACHC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,WAC3CE,SAAUP,EAAAA,KAEPG,IAAI,EAAG,sBACPC,IAAI,GAAI,qBACRC,aAGE,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAET,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDK,iBAAkBb,EAClBc,SAZiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GAASO,EAAAA,EAAAA,IAASF,IACfG,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAc,4BAApB,IACLC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,oCAAlB,IACTJ,GACD,EAGC,UAKE,UAAC,KAAD,CAAMM,aAAa,MAAMC,UAAWC,EAApC,WACE,mBAAOC,QAAQ,OAAOF,UAAWC,EAAjC,WACE,SAAC,KAAD,CACEE,KAAK,OACLvB,KAAK,OACLwB,YAAY,OACZJ,UAAWC,KAEb,SAAC,KAAD,CACEI,UAAU,OACVzB,KAAK,OACLoB,UAAWC,QAGf,mBAAOC,QAAQ,QAAQF,UAAWC,EAAlC,WACE,SAAC,KAAD,CACEE,KAAK,QACLvB,KAAK,QACLwB,YAAY,QACZJ,UAAWC,KAEb,SAAC,KAAD,CACEI,UAAU,OACVzB,KAAK,QACLoB,UAAWC,QAGf,mBAAOC,QAAQ,WAAWF,UAAWC,EAArC,WACE,SAAC,KAAD,CACEE,KAAK,WACLvB,KAAK,WACLwB,YAAY,WACZJ,UAAWC,KAEb,SAAC,KAAD,CACEI,UAAU,OACVzB,KAAK,WACLoB,UAAWC,QAGf,SAACK,EAAA,EAAD,CAAQH,KAAK,SAAb,0BAIP,CClFc,SAASI,IACtB,OACE,4BACE,6CACA,SAACrB,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/authComponent/RegisterForm/RegisterForm.module.css?9aae","components/authComponent/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formRegister\":\"RegisterForm_formRegister__pGN9+\",\"labelRegister\":\"RegisterForm_labelRegister__0pUe2\",\"fieldFormik\":\"RegisterForm_fieldFormik__frnpd\",\"errorMessage\":\"RegisterForm_errorMessage__J6Jkg\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\nimport { Button } from 'components/contactsComponent/Button/Button';\nimport css from './RegisterForm.module.css';\n\nconst schemaRegister = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Not enough symbols')\n    .max(32, 'Too long name')\n    .required(),\n  email: yup.string().email('Invalid email').required(),\n  password: yup\n    .string()\n    .min(6, 'Not enough symbols')\n    .max(20, 'Too long password')\n    .required(),\n});\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values))\n      .unwrap()\n      .then(() => toast.success('Registration successfully'))\n      .catch(() => toast.error('Something went wrong...Try again.'));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={schemaRegister}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\" className={css.formRegister}>\n        <label htmlFor=\"name\" className={css.labelRegister}>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            className={css.fieldFormik}\n          />\n          <ErrorMessage\n            component=\"span\"\n            name=\"name\"\n            className={css.errorMessage}\n          />\n        </label>\n        <label htmlFor=\"email\" className={css.labelRegister}>\n          <Field\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            className={css.fieldFormik}\n          />\n          <ErrorMessage\n            component=\"span\"\n            name=\"email\"\n            className={css.errorMessage}\n          />\n        </label>\n        <label htmlFor=\"password\" className={css.labelRegister}>\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            className={css.fieldFormik}\n          />\n          <ErrorMessage\n            component=\"span\"\n            name=\"password\"\n            className={css.errorMessage}\n          />\n        </label>\n        <Button type=\"submit\">Register</Button>\n      </Form>\n    </Formik>\n  );\n}\n","import { RegisterForm } from 'components/authComponent/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["schemaRegister","yup","shape","name","min","max","required","email","password","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","register","unwrap","then","toast","catch","autoComplete","className","css","htmlFor","type","placeholder","component","Button","Register"],"sourceRoot":""}